# StudentDataAnalyzer (SENG 265 - Assignment 3)

A C program that analyzes student performance data using dynamically allocated linked lists. This project, `spf_analyzer`, was developed as part of Assignment 3 for the SENG 265 course at the University of Victoria (Spring 2025). It performs various data filtering and sorting tasks based on command-line arguments.

## Features

- Processes a CSV file containing student data
- Supports 3 specific tasks based on flags:
  - `--TASK=1`: Filter by 100% attendance and extracurricular involvement (top 20 by Record_ID)
  - `--TASK=2`: Filter by >40 hours studied (top 10 by Exam Score descending)
  - `--TASK=3`: Filter by Exam Score ≥ 85 (top 10, sorted by Exam Score then Record_ID)
- Outputs filtered data to `output.csv`
- Uses a custom linked list implementation (arrays not allowed)

## Tasks

| Task     | Description                                                                                   | Output Fields                         | Max Records |
|----------|-----------------------------------------------------------------------------------------------|----------------------------------------|-------------|
| TASK 1   | Attendance = 100%, Extracurricular = Yes                                                      | Record_ID, Exam_Score                  | 20          |
| TASK 2   | Hours_Studied > 40                                                                             | Record_ID, Hours_Studied, Exam_Score  | 10          |
| TASK 3   | Exam_Score ≥ 85, sorted by Exam_Score (asc), Record_ID (asc if tie)                           | Record_ID, Hours_Studied, Exam_Score  | 10          |

## Compilation and Execution

To compile the program on the UGLS server (or locally using GCC):

```bash
make
```

To run a task:

```bash
./spf_analyzer --TASK=1
./spf_analyzer --TASK=2
./spf_analyzer --TASK=3
```

To test all tasks automatically:

```bash
chmod +x tester
./tester
```

## Files

- `spf_analyzer.c` – Main program logic for all tasks
- `list.c`, `list.h` – Linked list implementation
- `emalloc.c`, `emalloc.h` – Wrapper for safe dynamic memory allocation
- `makefile` – Automates compilation of all components
- `output.csv` – Output file generated by each run
- `TESTS.md` – Test case instructions and example usages
- `tester` – Automated test runner script
- `data/a3-data.csv` – Input dataset
- `tests/test01.csv` – Expected output for TASK 1
- `tests/test02.csv` – Expected output for TASK 2
- `tests/test03.csv` – Expected output for TASK 3

## Notes

- All inputs are assumed to be well-formed CSVs
- The program must run in the UGLS environment as specified in the assignment
- Uses no global variables and dynamically allocates all memory
- No array-based storage is used—only linked lists

## Author

Mihail Maravelias  
University of Victoria – Software Engineering  
Spring 2025
